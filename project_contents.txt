--- START OF FILE: .gitignore ---

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


--- END OF FILE: .gitignore ---

================================================================================

--- START OF FILE: App.tsx ---

import React, { useState, useEffect } from 'react';
import Header from './components/Header.tsx';
import Hero from './components/Hero.tsx';
import About from './components/About.tsx';
import ProductGallery from './components/ProductGallery.tsx';
import Process from './components/Process.tsx';
import Contact from './components/Contact.tsx';
import Footer from './components/Footer.tsx';
import Preloader from './components/Preloader.tsx';

const App: React.FC = () => {
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 1500); // Simulate loading time
    return () => clearTimeout(timer);
  }, []);

  return (
    <>
      {loading && <Preloader />}
      <div className={`bg-zinc-900 text-stone-300 antialiased transition-opacity duration-1000 ${loading ? 'opacity-0' : 'opacity-100'}`}>
        <Header />
        <main>
          <Hero />
          <About />
          <ProductGallery />
          <Process />
          <Contact />
        </main>
        <Footer />
      </div>
    </>
  );
};

export default App;

--- END OF FILE: App.tsx ---

================================================================================

--- START OF FILE: README.md ---




--- END OF FILE: README.md ---

================================================================================

--- START OF FILE: collect_code.cjs ---

const fs = require('fs');
const path = require('path');

const projectRoot = '.'; 

const outputFile = 'project_contents.txt'; 

const ignoreDirs = new Set(['node_modules', '.git', 'dist', 'build', '.vscode']);

const ignoreFiles = new Set(['package-lock.json', '.DS_Store', outputFile]);

const ignoreExtensions = new Set(['.log', '.svg', '.png', '.jpg', '.jpeg', '.gif', '.ico', '.webp', '.lock']);


async function aggregateProjectFiles() {
    console.log(`Начинаю сборку файлов проекта...`);
    const outputStream = fs.createWriteStream(outputFile, { encoding: 'utf-8' });

    async function walk(directory) {
        let items;
        try {
            items = await fs.promises.readdir(directory, { withFileTypes: true });
        } catch (err) {
            console.error(`Не удалось прочитать директорию: ${directory}`, err);
            return;
        }

        for (const item of items) {
            const fullPath = path.join(directory, item.name);

            if (item.isDirectory()) {
                if (!ignoreDirs.has(item.name)) {
                    await walk(fullPath);
                }
            } else {
                const ext = path.extname(item.name).toLowerCase();
                if (ignoreFiles.has(item.name) || ignoreExtensions.has(ext)) {
                    continue;
                }

                const relativePath = path.relative(projectRoot, fullPath);
                
                try {
                    const content = await fs.promises.readFile(fullPath, 'utf-8');
                    outputStream.write(`--- START OF FILE: ${relativePath} ---\n\n`);
                    outputStream.write(content);
                    outputStream.write(`\n\n--- END OF FILE: ${relativePath} ---\n\n`);
                    outputStream.write("=".repeat(80) + "\n\n");
                } catch (err) {
                    console.error(`Не удалось прочитать файл ${fullPath}:`, err);
                }
            }
        }
    }

    await walk(projectRoot);
    outputStream.end();
    console.log(`\x1b[32m%s\x1b[0m`, `\nГотово! Весь код проекта сохранен в файле: ${outputFile}`);
}

aggregateProjectFiles();


--- END OF FILE: collect_code.cjs ---

================================================================================

--- START OF FILE: components/About.tsx ---

import React from 'react';
import ScrollAnimator from './ScrollAnimator.tsx';

const About: React.FC = () => {
  return (
    <section id="about" className="py-20 md:py-32 bg-zinc-800 overflow-hidden">
      <div className="container mx-auto px-6">
        <div className="grid md:grid-cols-2 gap-12 lg:gap-20 items-center">
          <ScrollAnimator className="rounded-lg overflow-hidden shadow-2xl">
            <img src="/images/f.png" alt="Мастер за работой" className="w-full h-full object-cover" />
          </ScrollAnimator>
          <div>
            <ScrollAnimator>
                <h2 className="text-4xl md:text-5xl font-bold text-amber-400 mb-6">Наследие и мастерство</h2>
            </ScrollAnimator>
            <ScrollAnimator delay={200}>
                <p className="text-stone-300 mb-4 leading-relaxed">
                  Приветствую! Я — ремесленник, посвятивший свою жизнь искусству работы с кожей. Каждое изделие в моей мастерской — это не просто аксессуар, а история, рассказанная через стежки и фактуру материала.
                </p>
            </ScrollAnimator>
            <ScrollAnimator delay={300}>
                <p className="text-stone-300 mb-4 leading-relaxed">
                  Я использую только лучшие сорта кожи и проверенные временем технологии, чтобы создавать вещи, которые будут служить вам верой и правдой долгие годы, приобретая со временем лишь благородство и уникальный характер.
                </p>
            </ScrollAnimator>
            <ScrollAnimator delay={400}>
                <p className="text-stone-300 leading-relaxed">
                  Моя цель — возродить ценность ручного труда и подарить вам частичку тепла и аутентичности в мире массового производства.
                </p>
            </ScrollAnimator>
          </div>
        </div>
      </div>
    </section>
  );
};

export default About;

--- END OF FILE: components/About.tsx ---

================================================================================

--- START OF FILE: components/Contact.tsx ---

import React from 'react';
import { TelegramIcon, InstagramIcon } from '../constants.tsx';
import ScrollAnimator from './ScrollAnimator.tsx';

const Contact: React.FC = () => {
  return (
    <section id="contact" className="py-20 md:py-32 bg-zinc-900 overflow-hidden">
      <div className="container mx-auto px-6 text-center">
        <ScrollAnimator>
          <h2 className="text-4xl md:text-5xl font-bold text-amber-400 mb-6">Свяжитесь с нами</h2>
        </ScrollAnimator>
        <ScrollAnimator delay={200}>
          <p className="max-w-2xl mx-auto text-lg text-stone-300 mb-10">
            Готовы сделать заказ или есть вопросы? Напишите мне в социальных сетях. Я с радостью помогу вам выбрать или создать идеальное изделие.
          </p>
        </ScrollAnimator>
        <ScrollAnimator delay={400}>
          <div className="flex justify-center items-center gap-6">
            <a 
              href="https://t.me/Gos_Duma1" 
              target="_blank" 
              rel="noopener noreferrer" 
              className="flex items-center gap-3 bg-sky-500 text-white font-semibold py-3 px-6 rounded-sm hover:bg-sky-600 transition-colors duration-300 transform hover:scale-105"
            >
              <TelegramIcon />
              <span>Telegram</span>
            </a>
            <a 
              href="https://instagram.com/example" 
              target="_blank" 
              rel="noopener noreferrer" 
              className="flex items-center gap-3 bg-gradient-to-r from-purple-500 via-pink-500 to-orange-500 text-white font-semibold py-3 px-6 rounded-sm hover:opacity-90 transition-opacity duration-300 transform hover:scale-105"
            >
              <InstagramIcon />
              <span>Instagram</span>
            </a>
          </div>
        </ScrollAnimator>
      </div>
    </section>
  );
};

export default Contact;

--- END OF FILE: components/Contact.tsx ---

================================================================================

--- START OF FILE: components/Footer.tsx ---

import React from 'react';
import { TelegramIcon, InstagramIcon } from '../constants.tsx';

const Footer: React.FC = () => {
  const currentYear = new Date().getFullYear();
  return (
    <footer className="bg-zinc-950/50 border-t border-zinc-800">
      <div className="container mx-auto px-6 py-8">
        <div className="flex flex-col md:flex-row justify-between items-center gap-6">
          <p className="text-stone-500 text-sm">
            &copy; {currentYear} Мастерская кожаных изделий. Все права защищены.
          </p>
          <div className="flex items-center gap-6">
            <a href="https://t.me/Gos_Duma1" target="_blank" rel="noopener noreferrer" className="text-stone-400 hover:text-sky-500 transition-colors">
              <span className="sr-only">Telegram</span>
              <TelegramIcon />
            </a>
            <a href="https://instagram.com/example" target="_blank" rel="noopener noreferrer" className="text-stone-400 hover:text-pink-500 transition-colors">
              <span className="sr-only">Instagram</span>
              <InstagramIcon />
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

--- END OF FILE: components/Footer.tsx ---

================================================================================

--- START OF FILE: components/Header.tsx ---

import React, { useState, useEffect } from 'react';

const Header: React.FC = () => {
  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <header className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ${isScrolled ? 'bg-zinc-900/90 shadow-lg backdrop-blur-sm' : 'bg-transparent'}`}>
      <div className="container mx-auto px-6 py-4">
        <div className="flex justify-between items-center">
          <a href="#" className="text-2xl font-bold text-amber-400 font-serif tracking-wider">Мастерская</a>
          <nav className="hidden md:flex space-x-8">
            <a href="#about" className="text-stone-300 hover:text-amber-400 transition-colors duration-200">О нас</a>
            <a href="#products" className="text-stone-300 hover:text-amber-400 transition-colors duration-200">Изделия</a>
            <a href="#process" className="text-stone-300 hover:text-amber-400 transition-colors duration-200">Процесс</a>
            <a href="#contact" className="text-stone-300 hover:text-amber-400 transition-colors duration-200">Контакты</a>
          </nav>
        </div>
      </div>
    </header>
  );
};

export default Header;

--- END OF FILE: components/Header.tsx ---

================================================================================

--- START OF FILE: components/Hero.tsx ---

import React from 'react';

const Hero: React.FC = () => {
  return (
    <section className="relative h-screen flex items-center justify-center text-center text-white" id="home">
      <div className="absolute top-0 left-0 w-full h-full bg-cover bg-center bg-no-repeat" style={{ backgroundImage: "url('https://images.unsplash.com/photo-1528913233263-5b837c44a30a?q=80&w=1920&h=1080&fit=crop&crop=entropy')" }}></div>
      <div className="absolute top-0 left-0 w-full h-full bg-black opacity-60"></div>
      <div className="relative z-10 px-4">
        <h1 className="text-5xl md:text-7xl font-bold tracking-tight text-amber-50 animate-fade-in-up" style={{ animationDelay: '200ms', animationDuration: '1s' }}>Искусство в каждой детали</h1>
        <p className="mt-4 max-w-2xl mx-auto text-lg md:text-xl text-stone-300 animate-fade-in-up" style={{ animationDelay: '500ms', animationDuration: '1s' }}>
          Изделия из натуральной кожи, созданные вручную с любовью и вниманием к традициям.
        </p>
        <a 
          href="#products" 
          className="mt-8 inline-block bg-amber-500 text-zinc-900 font-bold py-3 px-8 rounded-sm hover:bg-amber-600 transition-transform duration-300 transform hover:scale-105 animate-fade-in-up"
          style={{ animationDelay: '800ms', animationDuration: '1s' }}
        >
          Смотреть коллекцию
        </a>
      </div>
    </section>
  );
};

export default Hero;

--- END OF FILE: components/Hero.tsx ---

================================================================================

--- START OF FILE: components/Preloader.tsx ---

import React from 'react';

const Preloader: React.FC = () => {
  return (
    <div className="fixed inset-0 bg-zinc-900 flex justify-center items-center z-[100]">
      <div className="relative flex justify-center items-center">
        <div className="absolute h-24 w-24 rounded-full border-t-2 border-b-2 border-amber-400 animate-spin"></div>
        <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1}>
          <path strokeLinecap="round" strokeLinejoin="round" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
        </svg>
      </div>
    </div>
  );
};

export default Preloader;

--- END OF FILE: components/Preloader.tsx ---

================================================================================

--- START OF FILE: components/Process.tsx ---

import React from 'react';
import { LeatherIcon, HandIcon, QualityIcon } from '../constants.tsx';
import ScrollAnimator from './ScrollAnimator.tsx';

const Process: React.FC = () => {
  const steps = [
    {
      icon: <LeatherIcon />,
      title: 'Отбор кожи',
      description: 'Мы тщательно отбираем лучшие материалы, чтобы каждое изделие было прочным и красивым.'
    },
    {
      icon: <HandIcon />,
      title: 'Ручная работа',
      description: 'Каждая деталь выкраивается и сшивается вручную, что гарантирует уникальность и качество.'
    },
    {
      icon: <QualityIcon />,
      title: 'Контроль качества',
      description: 'Все изделия проходят строгий контроль на каждом этапе, чтобы вы получили безупречный продукт.'
    }
  ];

  return (
    <section id="process" className="py-20 md:py-32 bg-zinc-800 overflow-hidden">
      <div className="container mx-auto px-6">
        <ScrollAnimator>
          <h2 className="text-4xl md:text-5xl font-bold text-center text-amber-400 mb-16">Процесс создания</h2>
        </ScrollAnimator>
        <div className="grid md:grid-cols-3 gap-12 text-center">
          {steps.map((step, index) => (
            <ScrollAnimator key={index} delay={index * 200}>
              <div className="flex flex-col items-center">
                <div className="flex items-center justify-center h-24 w-24 rounded-full bg-zinc-900 mb-6 border-2 border-amber-400/20">
                  {step.icon}
                </div>
                <h3 className="text-2xl font-semibold text-stone-200 mb-3">{step.title}</h3>
                <p className="text-stone-400 leading-relaxed max-w-xs">{step.description}</p>
              </div>
            </ScrollAnimator>
          ))}
        </div>
      </div>
    </section>
  );
};

export default Process;

--- END OF FILE: components/Process.tsx ---

================================================================================

--- START OF FILE: components/ProductCard.tsx ---

import React from 'react';
import type { Product } from '../types.ts';

interface ProductCardProps {
  product: Product;
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  return (
    <div className="bg-zinc-800 rounded-lg overflow-hidden group transition-all duration-300 transform hover:-translate-y-2 hover:shadow-2xl hover:shadow-amber-500/10">
      <div className="aspect-[3/4]">
        <img src={product.imageUrl} alt={product.name} className="w-full h-full object-cover" />
      </div>
      <div className="p-6">
        <h3 className="text-2xl font-semibold text-stone-200 mb-2">{product.name}</h3>
        <p className="text-stone-400 text-sm leading-relaxed">{product.description}</p>
      </div>
    </div>
  );
};

export default ProductCard;

--- END OF FILE: components/ProductCard.tsx ---

================================================================================

--- START OF FILE: components/ProductGallery.tsx ---

import React, { useState, useMemo } from 'react';
import { PRODUCTS } from '../constants.tsx';
import { ProductCategory } from '../types.ts';
import ProductCard from './ProductCard.tsx';
import ScrollAnimator from './ScrollAnimator.tsx';

const ProductGallery: React.FC = () => {
  const [filter, setFilter] = useState<ProductCategory>(ProductCategory.ALL);

  const categories = Object.values(ProductCategory);

  const filteredProducts = useMemo(() => {
    if (filter === ProductCategory.ALL) {
      return PRODUCTS;
    }
    return PRODUCTS.filter(product => product.category === filter);
  }, [filter]);

  return (
    <section id="products" className="py-20 md:py-32 bg-zinc-900 overflow-hidden">
      <div className="container mx-auto px-6">
        <ScrollAnimator>
          <h2 className="text-4xl md:text-5xl font-bold text-center text-amber-400 mb-12">Наши изделия</h2>
        </ScrollAnimator>
        
        <ScrollAnimator delay={200}>
          <div className="flex justify-center flex-wrap gap-2 md:gap-4 mb-12">
            {categories.map(category => (
              <button
                key={category}
                onClick={() => setFilter(category)}
                className={`px-5 py-2 text-sm font-medium rounded-full transition-colors duration-300
                  ${filter === category 
                    ? 'bg-amber-500 text-zinc-900' 
                    : 'bg-zinc-800 text-stone-300 hover:bg-zinc-700'
                  }`}
              >
                {category}
              </button>
            ))}
          </div>
        </ScrollAnimator>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
          {filteredProducts.map((product, index) => (
            <ScrollAnimator key={product.id} delay={index * 100}>
              <ProductCard product={product} />
            </ScrollAnimator>
          ))}
        </div>
      </div>
    </section>
  );
};

export default ProductGallery;

--- END OF FILE: components/ProductGallery.tsx ---

================================================================================

--- START OF FILE: components/ScrollAnimator.tsx ---

import React, { useState, useRef, useEffect, ReactNode } from 'react';

interface ScrollAnimatorProps {
  children: ReactNode;
  className?: string;
  delay?: number;
}

const ScrollAnimator: React.FC<ScrollAnimatorProps> = ({ children, className = '', delay = 0 }) => {
  const [isVisible, setIsVisible] = useState(false);
  const domRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          setIsVisible(true);
          if(domRef.current) {
            observer.unobserve(domRef.current);
          }
        }
      });
    }, { threshold: 0.1 });

    const { current } = domRef;
    if (current) {
      observer.observe(current);
    }

    return () => {
      if (current) {
        observer.unobserve(current);
      }
    };
  }, []);

  return (
    <div
      ref={domRef}
      className={`${className} transition-[opacity,transform] duration-700 ease-out ${isVisible ? 'opacity-100 translate-y-0 scale-100' : 'opacity-0 translate-y-4 scale-95'}`}
      style={{ transitionDelay: `${delay}ms` }}
    >
      {children}
    </div>
  );
};

export default ScrollAnimator;

--- END OF FILE: components/ScrollAnimator.tsx ---

================================================================================

--- START OF FILE: constants.tsx ---

import React from 'react';
import { Product, ProductCategory } from './types.ts';

export const PRODUCTS: Product[] = [
  {
    id: 1,
    name: 'Чехол для телефона "Крокодил"',
    description: 'Элегантный чехол из тисненой под крокодила кожи черного цвета. Надежная защита и стильный вид.',
    imageUrl: '/images/e.png',
    category: ProductCategory.CASES,
  },
  {
    id: 2,
    name: 'Кошелек "Классика"',
    description: 'Классический кошелек из натуральной коричневой кожи с застежкой-кнопкой. Прошит вручную.',
    imageUrl: '/images/r.png',
    category: ProductCategory.WALLETS,
  },
  {
    id: 3,
    name: 'Сумка на пояс "Урбан"',
    description: 'Удобная и вместительная сумка на пояс из коричневой кожи. Идеальна для города и путешествий.',
    imageUrl: '/images/u.png',
    category: ProductCategory.BAGS,
  },
  {
    id: 4,
    name: 'Портмоне "Тревелер"',
    description: 'Вместительное портмоне из коричневой кожи для путешествий. Отделения для карт и документов.',
    imageUrl: '/images/a.png',
    category: ProductCategory.WALLETS,
  },
  {
    id: 5,
    name: 'Картхолдер "Индиго"',
    description: 'Компактный картхолдер из синей кожи с белой прошивкой. Минимализм и функциональность.',
    imageUrl: '/images/w.png',
    category: ProductCategory.WALLETS,
  },
  {
    id: 6,
    name: 'Сумка-сэтчел "Изумруд"',
    description: 'Яркая сумка-сэтчел из кожи насыщенного изумрудного цвета. Вместительная и стильная.',
    imageUrl: '/images/p.png',
    category: ProductCategory.BAGS,
  },
   {
    id: 8,
    name: 'Сумка-кроссбоди "Бордо"',
    description: 'Элегантная сумка-кроссбоди из гладкой кожи винного цвета с оригинальной застежкой.',
    imageUrl: '/images/s.png',
    category: ProductCategory.BAGS,
  },
  {
    id: 9,
    name: 'Сумка "Олива"',
    description: 'Практичная и стильная сумка из кожи оливкового цвета. Подойдет на каждый день.',
    imageUrl: '/images/o.png',
    category: ProductCategory.BAGS,
  },
];

export const LeatherIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1}>
      <path strokeLinecap="round" strokeLinejoin="round" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
    </svg>
);

export const HandIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 00-3 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11m0-5.5a1.5 1.5 0 013 0v3m0 0V11" />
    </svg>
);

export const QualityIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
);

export const TelegramIcon = () => (
    <svg viewBox="0 0 24 24" fill="currentColor" className="h-6 w-6">
        <path d="M11.944 0A12 12 0 000 12a12 12 0 0012 12 12 12 0 0012-12A12 12 0 0012 0a12 12 0 00-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 01.171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.17.91-.494 1.208-.822 1.23-.696.047-1.225-.46-1.9-.902-1.018-.65-1.59-1.045-2.57-1.674-.996-.638-1.77-1.012-1.51-1.656.244-.593 1.6-5.18 1.6-5.18s.168-.527-.244-.527c-.412 0-.96.244-1.359.488-.56.345-1.017.593-1.474.593-.458 0-.83-.122-1.12-.244s-.56-.366-.56-1.12c0-.61.28-1.01.83-1.36 2.01-1.22 5.06-2.04 5.06-2.04s.41-.16.68 0z" />
    </svg>
);

export const InstagramIcon = () => (
    <svg viewBox="0 0 24 24" fill="currentColor" className="h-6 w-6">
        <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.85s-.011 3.584-.069 4.85c-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07s-3.584-.012-4.85-.07c-3.252-.148-4.771-1.691-4.919-4.919-.058-1.265-.069-1.645-.069-4.85s.011-3.584.069-4.85c.149-3.225 1.664-4.771 4.919-4.919 1.266-.058 1.644-.07 4.85-.07zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948s.014 3.667.072 4.947c.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072s3.667-.014 4.947-.072c4.358-.2 6.78-2.618 6.98-6.98.058-1.281.072-1.689.072-4.947s-.014-3.667-.072-4.947c-.2-4.358-2.618-6.78-6.98-6.98-1.281-.059-1.689-.073-4.948-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.162 6.162 6.162 6.162-2.759 6.162-6.162-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4s1.791-4 4-4 4 1.79 4 4-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44 1.441-.645 1.441-1.44-.645-1.44-1.441-1.44z" />
    </svg>
);

--- END OF FILE: constants.tsx ---

================================================================================

--- START OF FILE: index.html ---

<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Мастерская кожаных изделий</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@400;600;700&family=Montserrat:wght@400;500&display=swap" rel="stylesheet">
    
    <style>
      body {
        font-family: 'Montserrat', sans-serif;
        background-color: #18181b;
      }
      h1, h2, h3, h4, h5, h6 {
        font-family: 'Cormorant Garamond', serif;
      }
      @keyframes fade-in-up {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      .animate-fade-in-up {
        opacity: 0; /* start hidden */
        animation: fade-in-up ease-out forwards;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/index.tsx"></script>
  </body>
</html>

--- END OF FILE: index.html ---

================================================================================

--- START OF FILE: index.tsx ---

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

--- END OF FILE: index.tsx ---

================================================================================

--- START OF FILE: metadata.json ---

{
  "name": "Artisan Leather Goods Portfolio",
  "description": "A single-page portfolio website to showcase handmade leather goods, including bags, cases, and wallets. The site features a gallery, information about the artisan, and contact details.",
  "requestFramePermissions": [],
  "prompt": ""
}

--- END OF FILE: metadata.json ---

================================================================================

--- START OF FILE: package.json ---

{
  "name": "artisan-leather-goods-portfolio",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@vitejs/plugin-react": "^4.7.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@types/node": "^22.14.0",
    "@types/react-dom": "^19.1.6",
    "typescript": "~5.7.2",
    "vite": "^6.2.0"
  }
}


--- END OF FILE: package.json ---

================================================================================

--- START OF FILE: tsconfig.json ---

{
  "compilerOptions": {
    "target": "ES2020",
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "allowJs": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    "paths": {
      "@/*" :  ["./*"]
    }
  }
}


--- END OF FILE: tsconfig.json ---

================================================================================

--- START OF FILE: types.ts ---


export enum ProductCategory {
  ALL = 'Все',
  BAGS = 'Сумки',
  WALLETS = 'Кошельки',
  CASES = 'Чехлы',
}

export interface Product {
  id: number;
  name: string;
  description: string;
  imageUrl: string;
  category: ProductCategory;
}


--- END OF FILE: types.ts ---

================================================================================

--- START OF FILE: vite.config.ts ---

import path from 'path';
import { defineConfig, loadEnv } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig(({ mode }) => {
    const env = loadEnv(mode, '.', '');
    return {
      plugins: [react()],
      define: {
        'process.env.API_KEY': JSON.stringify(env.GEMINI_API_KEY),
        'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY)
      },
      resolve: {
        alias: {
          '@': path.resolve(__dirname, '.'),
        }
      }
    };
});

--- END OF FILE: vite.config.ts ---

================================================================================

